{"version":3,"file":"static/js/526.7ca55d67.chunk.js","mappings":"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","sources":["hooks/useSuggestions.js","pages/Explore/components/PostItem.js","helpers/gridCounter.js","pages/Explore/components/PostsList.js","pages/Explore/Explore.js"],"sourcesContent":["import { useState } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { doc, collection, getDocs, getDoc } from \"firebase/firestore\"\r\nimport { db } from \"../firebase/firebase\"\r\n\r\nconst useSuggestions = () => {\r\n\r\n    const userRedux = useSelector(state => state.userReducer.user)\r\n    const [currentUserInfo, setCurrenUserInfo] = useState()\r\n\r\n    const getCurrenUser = async () => {\r\n        const userRef = doc(db, 'users', userRedux.uid)\r\n\r\n        const userSnap = await getDoc(userRef)\r\n\r\n        setCurrenUserInfo(userSnap.data())\r\n    }\r\n\r\n    const fetchUsers = async (usersLength) => {\r\n        await getCurrenUser()\r\n        const usersRef = collection(db, \"users\");\r\n\r\n        const usersSnap = await getDocs(usersRef)\r\n        console.log(usersSnap.docs)\r\n        const arrayAllUsers = usersSnap.docs.map(elem => elem.data())\r\n        const mapedUsersSnap = arrayAllUsers.filter(elem => elem.uid !== userRedux.uid && userRedux.following.every(followUser => followUser.uid !== elem.uid))\r\n            .slice(0, usersLength).sort(() => 0.5 - Math.random())\r\n\r\n        return mapedUsersSnap\r\n    }\r\n\r\n    return { fetchUsers }\r\n}\r\n\r\nexport default useSuggestions","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { gridCounter } from '../../../helpers/gridCounter'\r\n\r\nconst PostItem = ({ post, idx }) => {\r\n    const [isHovered, setIsHovered] = useState(false)\r\n\r\n    console.log(post.image)\r\n\r\n    const isBigPost = gridCounter(idx + 1)\r\n    return (\r\n        <>\r\n\r\n            <div\r\n                className={` border relative cursor-pointer aspect-square bg-black ${isBigPost ? 'row-span-2 col-span-2' : 'row-span-1 col-span-1'}`}\r\n                onMouseEnter={() => setIsHovered(true)}\r\n                onMouseLeave={() => setIsHovered(false)}\r\n            >\r\n                <Link to={`${post.user.displayName}/${post.uid}`}>\r\n                    {\r\n                        isHovered &&\r\n                        (\r\n\r\n                            <div className='w-full h-full absolute flex justify-center items-center bg-black/25'>\r\n                                <div className=\"flex items-center mr-5\">\r\n                                    <img alt=\"likes\" src={process.env.PUBLIC_URL + \"/images/heart-white-icon.png\"} className=\"w-5 h-5 mr-2\" />\r\n                                    <p className=\"text-white text-sm font-semibold\">{post.likes.length}</p>\r\n                                </div>\r\n                                <div className=\"flex items-center\">\r\n                                    <img alt=\"comments\" src={process.env.PUBLIC_URL + \"/images/speech-bubble-white-icon.png\"} className=\"w-5 h-5 mr-2\" />\r\n                                    <p className=\"text-white text-sm font-semibold\">{post.comments.length}</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                        )\r\n                    }\r\n                    <img alt=\"userPhoto\" src={post.image} className=\"w-full h-full object-cover\" />\r\n                    \r\n                </Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(PostItem)","export const gridCounter = (idx) => {\r\n    const counter = 6\r\n    return ((counter + idx) % 8) === 0 ? true : false\r\n}","import React, {useMemo} from \"react\";\r\nimport PostItem from \"./PostItem\";\r\nimport { Outlet } from \"react-router-dom\";\r\n\r\nconst PostsList = ({allPosts}) => {\r\n\r\n    const mapedPosts = useMemo(() => allPosts.map((elem, idx) => <PostItem key={elem.uid} idx={idx} post={elem} />), [allPosts])\r\n\r\n    return (\r\n        <>\r\n            <section className=\"flex justify-center w-full\">\r\n                <div className=\"container max-w-5xl mt-3 relative pl-5\">\r\n                    <div className=\"grid sm:gap-3 lg:gap-7 gap-1 grid-cols-3 grid-cols-3 auto-cols-[300px] auto-rows-auto mt-3\">\r\n                        {mapedPosts}\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n            {\r\n                allPosts.length > 0 && <Outlet context={{ posts: allPosts }} />\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(PostsList)","import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../../components/Header/Header\";\r\nimport PostsList from \"./components/PostsList\";\r\nimport useSuggestions from \"../../hooks/useSuggestions\";\r\nimport Loading from \"../../components/Loaders/Loaging\";\r\n\r\nconst Explore = () => {\r\n\r\n    const [allPosts, setAllPosts] = useState([])\r\n    const { fetchUsers } = useSuggestions()\r\n    const POSTS_TO_FETCH = 100\r\n\r\n    useEffect(() => {\r\n        const getSuggestions = async () => {\r\n            const users = await fetchUsers(POSTS_TO_FETCH)\r\n            const helpArray = []\r\n            users.forEach(elem => {\r\n                helpArray.push(...elem.posts)\r\n            })\r\n\r\n            helpArray.sort(() => 0.5 - Math.random())\r\n            setAllPosts(helpArray)\r\n        }\r\n\r\n        getSuggestions()\r\n    }, [])\r\n\r\n\r\n    // useEffect(() => {\r\n    //     allPosts.forEach(async (elem, idx) => {\r\n    //         const userRef = doc(db, 'users', elem.user.uid)\r\n    //         const userdoc = await getDoc(userRef)\r\n\r\n    //         const userData = userdoc.data()\r\n    //         const needPost = userData.posts.find(elemPost => elemPost.uid === elem.uid)\r\n    //         setAllPosts(prevPosts => [...prevPosts, prevPosts[idx] = needPost])\r\n    //     })\r\n\r\n    // }, [location.pathname])\r\n\r\n\r\n    return (\r\n        <div className=\"w-full h-full\">\r\n            <Header />\r\n            {\r\n                allPosts.length > 0 ?\r\n                    (\r\n                        <PostsList allPosts={allPosts} />\r\n                    )\r\n                    :\r\n                    (\r\n\r\n                        <div className=\"h-[calc(100vh-65px)]\">\r\n                            <Loading width={50} height={50} />\r\n                        </div>\r\n                    )\r\n            }\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default React.memo(Explore)"],"names":["userRedux","useSelector","state","userReducer","user","useState","setCurrenUserInfo","getCurrenUser","userRef","doc","db","uid","getDoc","userSnap","data","fetchUsers","usersLength","usersRef","collection","getDocs","usersSnap","console","log","docs","arrayAllUsers","map","elem","mapedUsersSnap","filter","following","every","followUser","slice","sort","Math","random","PostItem","post","idx","isHovered","setIsHovered","image","isBigPost","gridCounter","className","onMouseEnter","onMouseLeave","to","displayName","alt","src","process","likes","length","comments","React","PostsList","allPosts","mapedPosts","useMemo","context","posts","Explore","setAllPosts","useSuggestions","useEffect","getSuggestions","users","helpArray","forEach","push","Header","width","height"],"sourceRoot":""}